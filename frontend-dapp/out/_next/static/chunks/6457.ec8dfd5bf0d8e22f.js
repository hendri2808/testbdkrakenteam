"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6457],{59014:function(e,t,i){i.d(t,{n:function(){return n}});function n(e){return"string"==typeof e?Number.parseInt(e,"0x"===e.trim().substring(0,2)?16:10):"bigint"==typeof e?Number(e):e}},76457:function(e,t,i){i.d(t,{EmbeddedWalletConnector:function(){return c}});var n=i(46795),r=i(19485),s=i(59014),a=i(85560),o=i(27021),h=i(96214);i(54146);class c extends o.C{constructor(e){super(),(0,n._)(this,"id",a.w.paper),(0,n._)(this,"name","Embedded Wallet"),(0,n._)(this,"ready",!0),(0,n._)(this,"user",null),(0,n._)(this,"onAccountsChanged",async e=>{0===e.length?await this.onDisconnect():this.emit("change",{account:r.getAddress(e[0])})}),(0,n._)(this,"onChainChanged",e=>{let t=(0,s.n)(e),i=-1===this.options.chains.findIndex(e=>e.chainId===t);this.emit("change",{chain:{id:t,unsupported:i}})}),(0,n._)(this,"onDisconnect",async()=>{this.emit("disconnect")}),this.options=e}getEmbeddedWalletSDK(){return this._embeddedWalletSdk||(this._embeddedWalletSdk=new h.E({clientId:this.options.clientId,chain:"Ethereum",onAuthSuccess:this.options.onAuthSuccess})),this._embeddedWalletSdk}async connect(e){if(e){if(!e.authResult)throw Error("Missing authData - call authenticate() first with your authentication strategy");if(!e.authResult.user)throw Error("Missing authData.user - call authenticate() first with your authentication strategy");this.user=e.authResult.user}else{let e=await this.authenticate({strategy:"iframe"});if(!e.user)throw Error("Error connecting User");this.user=e.user}return e?.chainId&&this.switchChain(e.chainId),this.getAddress()}async disconnect(){let e=this._embeddedWalletSdk;await e?.auth.logout(),this._signer=void 0,this._embeddedWalletSdk=void 0,this.user=null}async getAddress(){if(!this.user)throw Error("Embedded Wallet is not connected");return await this.getSigner().then(e=>e.getAddress())}async isConnected(){try{let e=await this.getAddress();return!!e}catch(e){return!1}}async getProvider(){let e=await this.getSigner();if(!e.provider)throw Error("Provider not found");return e.provider}async getSigner(){if(this._signer)return this._signer;let e=await this.getUser(),t=await e.wallet.getEthersJsSigner({rpcEndpoint:this.options.chain.rpc[0]||""});if(!t)throw Error("Signer not found");return this._signer=t,t}async isAuthorized(){return!1}async switchChain(e){let t=this.options.chains.find(t=>t.chainId===e);if(!t)throw Error("Chain not configured");try{await this.user?.wallet.setChain({chain:"Ethereum"}),this._signer=await this.user?.wallet.getEthersJsSigner({rpcEndpoint:t.rpc[0]||""}),this.emit("change",{chain:{id:e,unsupported:!1}})}catch(e){console.warn("Failed to switch chain",e)}}async setupListeners(){return Promise.resolve()}updateChains(e){this.options.chains=e}async getUser(){if(!this.user||!this.user.wallet||!this.user.wallet.getEthersJsSigner){let e=this.getEmbeddedWalletSDK(),t=await e.getUser();if(t.status===h.U.LOGGED_IN_WALLET_INITIALIZED)this.user=t;else throw Error("Embedded Wallet is not authenticated, please authenticate first")}return this.user}async getEmail(){let e=await this.getUser();return e.authDetails.email}async getPhoneNumber(){let e=await this.getUser();return e.authDetails.phoneNumber}async getRecoveryInformation(){let e=await this.getUser();return e.authDetails}async sendVerificationEmail(e){let{email:t}=e,i=this.getEmbeddedWalletSDK();return i.auth.sendEmailLoginOtp({email:t})}async sendVerificationSms(e){let{phoneNumber:t}=e,i=this.getEmbeddedWalletSDK();return i.auth.sendSmsLoginOtp({phoneNumber:t})}async authenticate(e){let t=this.getEmbeddedWalletSDK(),i=e.strategy;switch(i){case"email_verification":return await t.auth.verifyEmailLoginOtp({email:e.email,otp:e.verificationCode,recoveryCode:e.recoveryCode});case"phone_number_verification":return await t.auth.verifySmsLoginOtp({phoneNumber:e.phoneNumber,otp:e.verificationCode,recoveryCode:e.recoveryCode});case"apple":case"facebook":case"google":{let n=u[i];return t.auth.loginWithOauth({oauthProvider:n,closeOpenedWindow:e.closeOpenedWindow,openedWindow:e.openedWindow})}case"jwt":return t.auth.loginWithCustomJwt({jwt:e.jwt,encryptionKey:e.encryptionKey});case"auth_endpoint":return t.auth.loginWithCustomAuthEndpoint({payload:e.payload,encryptionKey:e.encryptionKey});case"iframe_email_verification":return t.auth.loginWithEmailOtp({email:e.email});case"iframe":return t.auth.loginWithModal();default:!function(e){throw Error("Invalid param: "+e)}(i)}}}let u={google:h.c.GOOGLE,facebook:h.c.FACEBOOK,apple:h.c.APPLE}}}]);