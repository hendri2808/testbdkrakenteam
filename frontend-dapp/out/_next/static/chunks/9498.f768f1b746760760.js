"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9498],{59014:function(t,i,n){n.d(i,{n:function(){return e}});function e(t){return"string"==typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"==typeof t?Number(t):t}},89498:function(t,i,n){n.d(i,{LocalWalletConnector:function(){return g}});var e=n(46795),s=n(59014),r=n(27021),a=n(23437),o=n(2515),h=n(48088),c=n(56371);n(54146);class d extends h.Signer{constructor(t){super(),this.signer=t,(0,c.defineReadOnly)(this,"provider",t.provider)}async getAddress(){return await this.signer.getAddress()}async signMessage(t){return await this.signer.signMessage(t)}async signTransaction(t){return await this.signer.signTransaction(t)}connect(t){return new d(this.signer.connect(t))}_signTypedData(t,i,n){return this.signer._signTypedData(t,i,n)}async sendTransaction(t){if(!this.provider)throw Error("Provider not found");let i=await (0,a.g)(this.provider),n={...i,...t};return await this.signer.sendTransaction(n)}}class g extends r.C{constructor(t){super(),(0,e._)(this,"id","local_wallet"),(0,e._)(this,"name","Local Wallet"),(0,e._)(this,"shimDisconnectKey","localWallet.shimDisconnect"),(0,e._)(this,"onChainChanged",t=>{let i=(0,s.n)(t),n=!this.options.chains.find(t=>t.chainId===i);this.emit("change",{chain:{id:i,unsupported:n}})}),this.options=t}async connect(t){t.chainId&&this.switchChain(t.chainId);let i=await this.getSigner(),n=await i.getAddress();return n}async disconnect(){this._provider=void 0,this._signer=void 0}async getAddress(){let t=await this.getSigner();if(!t)throw Error("No signer found");return await t.getAddress()}async isConnected(){try{let t=await this.getAddress();return!!t}catch{return!1}}async getProvider(){return this._provider||(this._provider=(0,o.a_)(this.options.chain,{clientId:this.options.clientId,secretKey:this.options.secretKey})),this._provider}async getSigner(){if(!this._signer){let t=await this.getProvider();this._signer=l(this.options.ethersWallet,t)}return this._signer}async switchChain(t){let i=this.options.chains.find(i=>i.chainId===t);if(!i)throw Error(`Chain not found for chainId ${t}, please add it to the chains property when creating this wallet`);this._provider=(0,o.a_)(i,{clientId:this.options.clientId,secretKey:this.options.secretKey}),this._signer=l(this.options.ethersWallet,this._provider),this.onChainChanged(t)}async setupListeners(){}updateChains(t){this.options.chains=t}}function l(t,i){let n=t;return i&&(n=t.connect(i)),new d(n)}}}]);